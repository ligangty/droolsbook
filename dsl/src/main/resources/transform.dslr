package com.github.ligangty.droolstest.dsl.etl;

import java.util.*;
import java.math.BigDecimal;

import com.github.ligangty.droolstest.transform.service.LegacyBankService;
import com.github.ligangty.droolstest.bank.model.Address;
import com.github.ligangty.droolstest.bank.model.Address.Country;

global LegacyBankService legacyService;

//stuff for reporting:
import com.github.ligangty.droolstest.bank.service.*;

global ValidationReport validationReport;
global ReportFactory reportFactory;

import function com.github.ligangty.droolstest.bank.service.ValidationHelper.*;

function String getConversionToUSDFrom(String currencyFrom) {
    String conversion = null;
	if ("EUR".equals(currencyFrom)) {
		conversion = "1.282";
	} else if ("SKK".equals(currencyFrom)) {
		conversion = "0.045";
	}
	return conversion;
}

expander transform.dsl

/*
>rule findAddress
>dialect "mvel"
>	when
>		Customer has legacy Address
>	then
>		load legacy Address	
>end
*/

rule "find Address"
dialect "mvel"
	when
>		$customerMap : Map( this["_type_"] == "Customer" )
>		$addressMap : Map( ) 
>			from legacyService.findAddressByCustomerId( 
>				$customerMap["customer_id"] )		
	then		
>		//$addressMap["_type_"] = "Address"
>		$addressMap.put("_type_", "Address");
>		insert( $addressMap )
end

/*
>rule findAccount
>dialect "mvel"
>	when
>		Customer has legacy Account
>	then		
>		load legacy Account	
>end
*/

// @extract-start 04 04
rule "two equal addresses remove duplication"
	when
		There is legacy Address-1
		There is legacy Address-2
		- Address-2 same as legacy Address-1		
	then
		remove legacy Address-2
		Display WARNING for legacy Address-2 
end
// @extract-end

// @extract-start 04 05
rule "address normalization USA"
	when
		There is legacy Address-1
		- country is one of "US", "U.S.", "USA", "U.S.A"		
	then
		for legacy Address-1 set country to USA 
end
// @extract-end

rule "address normalization Ireland"
	when
		There is legacy Address-1
		- country is one of "Ireland", "Republic of Ireland"		
	then
		for legacy Address-1 set country to Ireland 
end

// maybe experiment with agenda-groups instead of salience
// @extract-start 04 06
rule "unknown country"
Apply after address normalizations
	when
		There is legacy Address-1
		- country is not normalized 
	then
		Display ERROR for legacy Address-1
end
// @extract-end

rule "no currency to USD"
	when
		There is legacy Account-1
		- has no currency
	then
		for legacy Account-1 set currency to "USD"
end

rule "reduce legacy accounts"
Apply after currency conversions
	when
		There is legacy Account-1
		There is legacy Account-2
		- "customer_id" is same as in legacy Account-1
	then
		for legacy Account-1 set balance to sum balances
		remove legacy Account-2
end

rule "unknown currency if no USD"
	when
		There is legacy Account-1
		- has currency different to EUR
		unknown conversion value for this currency		
	then
		 Display ERROR for legacy Account-1
end

