//created on: 2014-10-27
package com.github.ligangty.droolstest.transform;

//list any import classes here.
import java.util.*;

import com.github.ligangty.droolstest.transform.service.LegacyBankService;
import com.github.ligangty.droolstest.bank.model.Address;
import com.github.ligangty.droolstest.bank.model.Address.Country;

global LegacyBankService legacyService;

rule "find All Customers"
	//dialect "mvel"
	when
		$customerMap : Map( ) from legacyService.findAllCustomers()
	then
		//$customerMap["_type_"] = "Customer";
		$customerMap.put("_type_", "Customer");
		insert( $customerMap );
end


rule "find Address"
    //dialect "mvel"
    when 
        $customerMap : Map( this["_type_"] == "Customer" )
        $addressMap : Map( ) from legacyService.findAddressByCustomerId((Long)$customerMap["customer_id"])
    then 
        //$customerMap["_type_"] = "Address";
        $addressMap.put("_type_", "Address");
        insert($addressMap);
end

// need to do reporting
import com.github.ligangty.droolstest.bank.service.*;

global ValidationReport validationReport;
global ReportFactory reportFactory;

import function com.github.ligangty.droolstest.bank.service.ValidationHelper.*;

rule "two equal addresses remove duplication"
    //dialect "mvel"
    when
        $addressMap1 : Map( this["_type_"] == "Address" )
        $addressMap2 : Map( this["_type_"] == "Address",
        	eval( $addressMap1 != $addressMap2 ), this == $addressMap1 )
    then
        retract($addressMap2);
        validationReport.addMessage(
			reportFactory.createMessage(Message.Type.WARNING, 
			kcontext.getRule().getName(), $addressMap2));
end

rule "address normalization USA"
    dialect "mvel"
    when 
        $addressMap : Map( this["_type_"] == "Address", this["country"] in ("US", "U.S.", "USA", "U.S.A") )
    then
        modify($addressMap){
        	put("country", Country.USA)
        };
end

rule "unknown country"
    // dialect "mvel"
    salience -10 //should fire after address normalization USA
    when 
        $addressMap : Map( this["_type_"] == "Address", eval(!($addressMap.get("country") instanceof Address.Country)))
    then 
        validationReport.addMessage(
			reportFactory.createMessage(Message.Type.ERROR, 
			kcontext.getRule().getName(), $addressMap));
end

import java.math.BigDecimal;
function String getConversionToUSDFrom(String currencyFrom) {
    String conversion = null;
	if ("EUR".equals(currencyFrom)) {
		conversion = "1.282";
	} else if ("SKK".equals(currencyFrom)) {
		conversion = "0.045";
	}
	return conversion;
}
//@extract-start 03 16
rule "currency conversion to USD"
    when 
        $accountMap : Map( this["_type_"] == "Account", this ["currency"] != null && != "USD" ) 
        $conversionRate : String() from getConversionToUSDFrom((String)$accountMap["currency"])
    then 
        modify($accountMap){
            put("balance", new BigDecimal($conversionRate).multiply(new BigDecimal((String)$accountMap.get("balance")))),
        	put("currency", "USD")
        };
end
// @extract-end

//@extract-start 03 15
rule "unknown currency if no USD"
    when 
        $accountMap : Map( this["_type_"] == "Account", this ["currency"] !=null && !="USD")
        not ( String() from getConversionToUSDFrom((String)$accountMap["currency"]) )
    then 
        validationReport.addMessage(
			reportFactory.createMessage(Message.Type.ERROR, 
			kcontext.getRule().getName(), $accountMap));
end
// @extract-end

rule "no currency to USD"
    when
        $accountMap : Map( this["_type_"] == "Account", this["currency"]==null ) 
    then 
        modify($accountMap){
            put("currency", "USD")
        };
end

// @extract-start 03 19    
rule "reduce legacy accounts"
    salience -20 // make sure currency conversion fired
    when 
        $accountMap1 : Map( this["_type_"] == "Account" )
        $accountMap2 : Map( this["_type_"] == "Account", eval( $accountMap2 != $accountMap1 ), 
        	this["customer_id"] == $accountMap1["customer_id"],
        	this["currency"] == $accountMap1["currency"] )
    then
        modify($accountMap1){
        	put("balance", ((BigDecimal) $accountMap1.get("balance")).add((BigDecimal) $accountMap2.get("balance")))
        };
        retract($accountMap2);
end 
// @extract-end